# -*- coding: utf-8 -*-
"""Christuaji : KM-05: Functions, OOP, Time Complexity .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/AuChrist/OrbitDataGoogle/blob/main/Exercise/Christuaji%20_%20KM-05_%20Functions%2C%20OOP%2C%20Time%20Complexity%20.ipynb

# **Fungsi**
"""

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

# Deklarasi Fungsi Ori
def nulis(a):
  print(a)

# Memanggil Fungsi 
nulis("aku belum makan")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

# Deklarasi Fungsi dengan pengembalian Ori
def mau_tidur():
  hujan = input("Apakah lagi hujan (y/n)")
  if hujan == 'y' or hujan == 'Y':
    hujan = True
  else:
    hujan = False

  if hujan == False:
    print('Gas Nongkrong')
  else:
    lama_tidur = int(input('Berapa lama mau tidur (menit): '))
    if lama_tidur > 5 and lama_tidur < 30:
      print('Mending ngopi')
      return True
    else:
      print('Molorrrrrrrr')
      return False

tidur = mau_tidur()

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

# Deklarasi Object (Class)
class Tidur(object):
  def bantal(self):
    print("Empuk")

# Memanggil Method
pillow = Tidur()
pillow.bantal()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

kurang = lambda a,b: (a - b)
print(kurang(5, 3))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, usia, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

# Enkapsulasi (Ori)

class Mahasiswa(object):
    def __init__(self, nama, umur, hobi, jurusan):
        # Properti Private Yang Ini
        self.__nama = nama
        self.__umur = umur
        self.__hobi = hobi
        self.__jurusan = jurusan

    # method getter
    def getNama(self):
        return self.__nama

    def getUmur(self):
        return self.__umur

    def getHobi(self):
        return self.__hobi

    def getJurusan(self):
        return self.__jurusan

    # method setter
    def setNama(self, nama):
        self.__nama = nama

    def setUmur(self, umur):
        self.__jenis = umur

    def setHobi(self, hobi):
        self.__hobi = hobi

    def setJurusan(self, jurusan):
        self.__jurusan = jurusan

    def info (self):
        print(f"Nama : {self.__nama}, Usia : {self.__umur}, Hobi : {self.__hobi}, Jurusan : {self.__jurusan}")

Aji = Mahasiswa("Christuaji Nirbawono Atmojo", 20, "Makan/Tidur", "Teknik Informatika")
Irfan = Mahasiswa("Muh. Irfansyah", 20, "Ngewibu", "Teknik Informatika")
Intan = Mahasiswa("Intan Juniar", 20, "Belajar", "Lupa Gaes :(")

orang1 = Mahasiswa("Christuaji", 20, "Makan/Tidur", "TI")
orang1.info()

print(Aji.getNama())
print(Irfan.getNama())
print(Intan.getNama())

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

# Memanggil method dari objek tanpa harus mengetahui cara kerja method (Ori)
orang1.info()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

# Inheritance (Ori)
# Parent Class
class Binatang:
  def suara(self):
      print("Binatang Bersuara")

# Child Class
class Anjing(Binatang):
  def gukguk(self):
      print("Gukguk.....Gukguk......Saya PDIP")

a = Anjing()
a.gukguk()
a.suara()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.tidur(5)

# Polymorphism (Ori)
class Mobil:
    def __init__(self, nama, umur):
        self.nama = nama
        self.umur = umur
 
    def bersuara(self):
        print("BRMMMMMMM")
 
 
class Motor:
    def __init__(self, nama, umur):
        self.nama = nama
        self.umur = umur
 
    def bersuara(self):
        print("MBRRRRRRR")
 
mobil1 = Mobil("BMW", 2)
motor1 = Motor("Nmax", 2)
 
for kendaraan in (mobil1, motor1):
    kendaraan.bersuara()

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)
"""

# Jawaban Activity
# Diki Ananta Code

# Encapsulation
# Enkapsulation
barang = "Meja belajar"
bahan = "Kayu Jati"
warna = "coklat"
jumlah = 2

def jenis():
  print("Meja Belajar olympics")

def info_meja(barang, bahan, warna, jumlah):
  print(f"barang : {barang}, bahan : {bahan}, warna : {warna}, jumlah : {jumlah}")

info_meja(barang, bahan, warna, jumlah)


class Meja:
  def __init__(self, barang, bahan, warna, jumlah):
    self.barang = barang
    self.bahan = bahan
    self.warna = warna
    self.jumlah = jumlah

  def myluv(self):
    print("Barang yang sering digunakan " + self.barang)
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, warna : {self.warna}, jumlah : {self.jumlah}")


mejaku = Meja("Meja belajar", "Kayu Jati", "coklat", 2)

mejaku.info()

#Abstraction 
mejaku.myluv()

"""--------------------------------------------------------------------------------"""

# Intan Code

# Enkapsulation
barang = "Meja belajar"
bahan = "Kayu Jati"
warna = "coklat"
jumlah = 2

def jenis():
  print("Meja Belajar olympics")

def info_meja(barang, bahan, warna, jumlah):
  print(f"barang : {barang}, bahan : {bahan}, warna : {warna}, jumlah : {jumlah}")

info_meja(barang, bahan, warna, jumlah)


class Meja:
  def __init__(self, barang, bahan, warna, jumlah):
    self.barang = barang
    self.bahan = bahan
    self.warna = warna
    self.jumlah = jumlah

  def myluv(self):
    print("Barang yang sering digunakan " + self.barang)
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, warna : {self.warna}, jumlah : {self.jumlah}")


mejaku = Meja("Meja belajar", "Kayu Jati", "coklat", 2)

# Abstraction 
# Memanggil method dari objek tanpa harus mengetahui cara kerja method
mejaku.myluv()

# Inheritence

class Benda(object):
  def __init__(self, barang, bahan, kokoh):
    self.barang = barang
    self.bahan = bahan
    self.kokoh = kokoh

  def tinggi(self, berapa):
    for x in range(berapa):
      print("Tingginya 130 cm")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, kokoh: {self.kokoh}")


object1 = Benda("Meja", "Kayu Jati",  True)

object1.info()

class Meja(Benda):
  def __init__(self,  barang, bahan, kokoh, warna,jumlah, guna):
    super().__init__(barang, bahan, kokoh)
    self.warna = warna
    self.jumlah = jumlah
    self.guna = guna
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info_benda(self):
    print(f"warna : {self.warna}, jumlah: {self.jumlah}, guna : {self.guna}")
# warna :{self.warna},

bendaku = Meja("Meja", "Kayu Jati",  True, "coklat", 2, "sebagai alas")

bendaku.info()
bendaku.info_benda()

# Polymorphism
class Kursi(Benda):
  def __init__(self,  barang, bahan, kokoh, warna, model, jenis_guna):
    super().__init__(barang, bahan, kokoh)
    self.warna = warna
    self.model = model
    self.jenis_guna = jenis_guna
  
  def panjang(self, berapa):
    print("Bisa buat rebahan....")

  def info_kursi(self):
    print(f"warna : {self.warna}, model : {self.model}, jenis guna : {self.jenis_guna}")

kursiku = Kursi("Kursi Tamu", "Kayu Jati",  False, "Coklat muda", "Kursi panjang resban", "Kursi tunggu")

kursiku.info()
kursiku.info_kursi()
kursiku.tinggi(3)

"""--------------------------------------------------------------------------------"""

# Enkapsulation Irfan
alat = "Laptop Impian"
grafis = "Intel"
procesor = "Core i9"
jumlah = 1

def jenis():
  print("Apple Macbook Pro")

def info_laptop(alat, grafis, procesor, jumlah):
  print(f"alat : {alat}, grafis : {grafis}, procesor : {procesor}, jumlah : {jumlah}")

info_laptop(alat, grafis, procesor, jumlah)


class Laptop:
  def __init__(self, alat, grafis, procesor, jumlah):
    self.alat = alat
    self.grafis = grafis
    self.procesor = procesor
    self.jumlah = jumlah

  def mimpiKu(self):
    print("Laptop yang paling di incar " + self.alat)
  
  def jenis(self):
    print("Nitro 5 AN515-44")

  def info(self):
    print(f"alat : {self.alat}, grafis : {self.grafis}, procesor : {self.procesor}, jumlah : {self.jumlah}")


Lepi = Laptop("Laptop Impian", "Intel", "Core i9", 1)

Lepi.info()

#Abstraction Irfan
Lepi.mimpiKu()

# Inheritence Irfan

class Elektronik(object):
  def __init__(self, alat, grafis, ori):
    self.alat = alat
    self.grafis = grafis
    self.ori = ori

  def tinggi(self, ukuran):
    for x in range(ukuran):
      print("14 inch")

  def info(self):
    print(f"alat : {self.alat}, grafis : {self.grafis}, ori: {self.ori}")


object1 = Elektronik("laptop", "Intel",  True)

object1.info()

class Laptop(Elektronik):
  def __init__(self, alat, grafis, ori, procesor,jumlah, ram):
    super().__init__(alat, grafis, ori)
    self.procesor = procesor
    self.jumlah = jumlah
    self.ram = ram
  
  def jenis(self):
    print("Nitro 5 AN515-44")

  def info_Elektronik(self):
    print(f"procesor : {self.procesor}, jumlah: {self.jumlah}, ram : {self.ram}")
# warna :{self.warna},

mylepi = Laptop("Laptop", "Intel",  True, "Core i9", 1, "8 GB")

mylepi.info()
mylepi.info_Elektronik()

# Polymorphism Irfan
class HandPhone(Elektronik):
  def __init__(self,  alat, grafis, ori, procesor, resolusi, ram):
    super().__init__(alat, grafis, ori)
    self.procesor = procesor
    self.resolusi = resolusi
    self.ram = ram
  
  def chipset(self, berapa):
    print("Qualcomm SM7225 Snapdragon 750G 5G")

  def info_hp(self):
    print(f"procesor : {self.procesor}, resolusi : {self.resolusi}, ram : {self.ram}")

hp = HandPhone("Hand Phone", "Android 11",  False, "Coklat muda", "1080 x 2408 pixels, 20:9 ratio (~400 ppi density)", "8GB")

hp.info()
hp.info_hp()
hp.tinggi(4)

"""# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1 Big O(1)

arr = [1, 2, 3, 4, 5]

print(arr[0]) # Big O(1)
print(arr[1]) # Big O(1)

# 2 Big O(n)

print(arr[2]) #Big O(1)
for number in arr: #Big O(n)
  print(number)
print(arr[1]) #Big O(1)
print(arr[2]) #Big O(1)

# 3 Big O (n)

arr2 = [6, 7, 8, 9, 10]

for number in arr: #Big O(n)
  print(number)
for number in arr2: # Big O(n)
  print(number)
print(arr2[4]) #Big O(1)

# 4 Big O(n)

print(arr2[1]) #Big O(1)
for number in arr: #Big O(n)
  print(number)
for number in arr: #Big O(n)
  print(number)

# 5 Big O(n^2)

for number in arr: #Big O(n^2)
  for number2 in arr2:
    print(number+number2)
print(arr[1]+arr2[1]) #Big O(1)
print(arr2[2]) #Big O(1)

# 6 #Big O(n^2)

for number in arr: #Big O(n^2)
  for number2 in arr:
    print(number+number2)
print(arr) #Big O(1)

# 7 #Big O(n^2)

for number in arr: #Big O(n^3)
  for number2 in arr2:
    for number3 in arr:
      print(number+number2+number3)
print(arr[1]) # Big O(1)
print(arr2[2]) # Big O(1)
print(arr2[3]) # Big O(1)

# 8 Big O(n^2)

for number in arr: #Big O(n)
  print(number)
print(arr2) #Big O(1)
for number in arr: #Big O(n^2)
  for number2 in arr2:
    print(number+number2)
print(arr) #Big O(1)

# 9 
# algoritma bubble sort

def bubbleSort(arr4):
    for passnum in range(len(arr4)-1,0,-1):
        for i in range(passnum):
            if arr4[i]>arr4[i+1]:
                temp = arr4[i]
                arr4[i] = arr4[i+1]
                arr4[i+1] = temp

arr4 = [14,46,43,27,57,41,45,21,70]
bubbleSort(arr4)
print(arr4)

# 10
# algoritma linear search
def linear_Search(list1, n, key):  
  
# Mencari list1 sequentially  
  for i in range(0, n):  
    if (list1[i] == key):  
        return i  
  return -1  
  
  
list1 = [1 ,3, 5, 4, 7, 9]  
key = int(input("Masukkan Angka : "))  
  
n = len(list1)  
res = linear_Search(list1, n, key)  
if(res == -1):  
    print("Element not found")  
else:  
    print("Element found at index: ", res)

# 11
# algoritma binary search

def binary_search(list2, n):  
    low = 0  
    high = len(list2) - 1  
    mid = 0  
  
    while low <= high:  
        # for get integer result   
        mid = (high + low) // 2
        if list2[mid] < n:
          low = mid + 1  
        elif list2[mid] > n:  
          high = mid - 1  
        else:  
          return mid  
    return -1  
  
    
list2 = [12, 24, 32, 39, 45, 50, 54]  
n = 45  
  
# Function call   
result = binary_search(list2, n)  
  
if result != -1:  
    print("Element ada pada index", str(result))  
else:  
    print("Element tidak dapat ditemukan")